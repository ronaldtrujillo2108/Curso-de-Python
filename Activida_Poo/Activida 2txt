Hola chicos! Tarea nueva para esta semana en nuestro curso de POO con Python! 🐍💻
Les comparto tres ejercicios 🔥 diseñados para que exploren a fondo conceptos de clases, encapsulamiento, validaciones, y esta vez... ¡hasta herencia! 🧬👾

---

🧙‍♂️ Ejercicio 1: Clase Libro

📚 Objetivo: Modelar una clase para gestionar libros en una biblioteca mágica (¡el saber es poder!) 💫

✨ Requisitos:
1. Crear la clase Libro con estos atributos:
   - titulo 📝 (público)
   - autor 👤 (público)
   - __numero_paginas 📄 (privado)
   - __prestado 📦 (privado, inicia en False)

2. Método prestar() 👉 si no está prestado, lo presta.
   - Si ya está prestado, muestra: "El libro ya ha sido prestado."

3. Método devolver() 👉 si está prestado, lo devuelve.
   - Si no lo está, muestra: "El libro no estaba prestado."

4. Método mostrar_detalles() 📋 muestra toda la info del libro incluyendo estado de préstamo.

5. Validación: si el número de páginas es menor que 10, ajústalo automáticamente a 10 y muestra una advertencia 🚨

🔓 Extra (Desafío):
Agrega un contador privado __cantidad_prestamos que se incremente cada vez que se preste el libro ✅
Incluye este valor en mostrar_detalles() 🧾

---

🧑‍🚀 Ejercicio 2: Clase Pokémon

🌟 Objetivo: Simular un Pokémon con habilidades y mecánicas básicas 🐾⚔️

🔧 Requisitos:
1. Crear la clase Pokemon con los atributos:
   - nombre ✍️ (público)
   - tipo 🔥💧🍃 (público)
   - __nivel 🔢 (privado, inicia en 1)
   - __salud ❤️ (privado, inicia en 100)

2. Método atacar(objetivo, daño) que reduce la salud del objetivo.
   - Verifica que el daño sea positivo y que el Pokémon atacante tenga salud> 0.

3. Método recibir_dano(dano) que le resta salud.
   - Si el daño supera la salud, deja la salud en 0.
   - No permite salud negativa.

4. Método subir_nivel() que aumenta el nivel en +1 cada vez que se llama.

5. Método estado() que muestra: nombre, tipo, nivel y salud actual 👀

🐉 Extra (Desafío de Herencia):

Crea una subclase llamada PokemonLegendario que herede de Pokemon
- Añade el atributo privado __habilidad_especial
- Sobreescribe el método atacar() para que, si el Pokémon está en nivel> 50, agregue +20 de daño adicional.

🧬 También incluye un método usar_habilidad() que muestra el nombre de la habilidad especial y un mensaje de efecto 🤖✨

---

🛠️ Ejercicio 3: Clase Auto

🚗 Objetivo: Crear una clase que simule acciones de un automóvil real

🔧 Requisitos:
1. Clase Auto con:
   - marca 🏷️ (público)
   - modelo 🛞 (público)
   - __encendido 🔌 (privado, inicia en False)
   - __nivel_combustible ⛽ (privado, inicia en 50)

2. Métodos:
   - encender() ✅ requiere mínimo 10 de combustible
   - apagar() 📴
   - conducir(kilometros) 🚀 reduce 1 unidad de combustible por km
   - recargar_combustible(cantidad) 🧪 hasta un máximo de 100
   - estado() que muestre todo

🧠 Validaciones:
- Impide conducir si está apagado
- Impide recargar con valores negativos o que excedan el máximo

🧬 Extra (Herencia):
Crea una subclase AutoElectrico que herede de Auto
- Reemplaza __nivel_combustible por __nivel_bateria ⚡
- Cambia el método recargar_combustible() por cargar_bateria() que muestra un mensaje tipo: "Batería cargada al X%"
- Añade un atributo modo_autopiloto (booleano público), y método activar_autopiloto() que muestra: "Autopiloto activado. Conduciendo automáticamente 🚘🤖"
